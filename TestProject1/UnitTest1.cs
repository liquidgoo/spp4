using System;
using TestClassGeneratorProject;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace TestProject1
{
    [TestClass]
    public class UnitTest1
    {

        static FileWithContent GetNewFileWithContent(string s)
        {
            return new FileWithContent(null, s);
        }

        static TestClassGenerator classGen = new TestClassGenerator();

        [TestMethod]
        public void TestGeneratedFilesCount()
        {
            Assert.AreEqual(0, classGen.GetTestClassFiles(GetNewFileWithContent(s0)).Result.Length, "Expected file count is 0!");
            Assert.AreEqual(5, classGen.GetTestClassFiles(GetNewFileWithContent(s1)).Result.Length, "Expected file count is 5!");
            Assert.AreEqual(0, classGen.GetTestClassFiles(GetNewFileWithContent(s2)).Result.Length, "Expected file count is 0!");
            Assert.AreEqual(1, classGen.GetTestClassFiles(GetNewFileWithContent(s3)).Result.Length, "Expected file count is 0!");
        }
        [TestMethod]
        public void TestFieldPropertiesRemoval()
        {
            Assert.AreEqual(propertyRemoval, classGen.GetTestClassFiles(GetNewFileWithContent(removalTest)).Result[0].Content, 
                "Fields & Properties were expected to be removed!");
        }
        [TestMethod]
        public void TestPublicVoidMethods()
        {
            Assert.AreEqual(publicVoidMethodsResult, classGen.GetTestClassFiles(GetNewFileWithContent(publicVoidMethodsTest)).Result[0].Content,
                "Resulted File had to have all public method fail!");
        }
        [TestMethod]
        public void TestNonPublicMethodsRemoval()
        {
            Assert.AreEqual(nonPublicMethodsRemovalResult, classGen.GetTestClassFiles(GetNewFileWithContent(nonPublicMethodsRemoval)).Result[0].Content,
                "Non-public methods had to be removed!");
        }
        [TestMethod]
        public void TestSeveralConstructors()
        {
            Assert.AreEqual(ConstructorTestResult, classGen.GetTestClassFiles(GetNewFileWithContent(ConstructorTest)).Result[0].Content,
                "Only one constructor had to be called!");
        }

        #region Strings
        static string s0 = @"";

        static string s1 = @"
            using System;
            using System.IO;

            namespace Hello{
	            class A { }
	            class B { }
	            class C { }
	            class D { }
	            class E { }
            }";

        static string s2 = @"
            using System;
            using System.IO;
        ";

        static string s3 = @"
            using System;
            using System.IO;

	        class ImJustALonelyClassNoNeedToWorryReally { }
            ";

        static string removalTest = @"using System;

namespace Hello1 {

	namespace Hello2 {

		class Program {
			public int a;
			private double d;
			protected Random rand;
			string str;
			DateTime dt;

			public Boolean BoolProperty { get; set; };

			Program prog;
		}
	}
}";

        static string propertyRemoval = @"using System.Generics;
using NUnit.Framework;
using Moq;

namespace GeneratedTestClasses
{
    [TestFixture]
    class ProgramTest
    {
        private Program _program;
    }
}";

        static string publicVoidMethodsTest = @"using System;

namespace Hello1 {

	namespace Hello2 {

		class Program {
			public void MethodOne() { Console.WriteLine(""Прифффки!!""); }
			public void MethodTwo() { int x = 3 + 1; }
        public void MethodTree() { Console.WriteLine(""1 \\ 0""); }

        public void MethodFour() { Console.WriteLine(""Рекурсия, просто здрайствуй, просто как дела!""); MethodFour(); }
    }
}
}";

        static string publicVoidMethodsResult = @"using System.Generics;
using NUnit.Framework;
using Moq;

namespace GeneratedTestClasses
{
    [TestFixture]
    class ProgramTest
    {
        [Test]
        public void MethodOneTest()
        {
            Assert.Fail(""autogenerated"");
        }

        [Test]
        public void MethodTwoTest()
        {
            Assert.Fail(""autogenerated"");
        }

        [Test]
        public void MethodTreeTest()
        {
            Assert.Fail(""autogenerated"");
        }

        [Test]
        public void MethodFourTest()
        {
            Assert.Fail(""autogenerated"");
        }

        private Program _program;
    }
}";
        static string nonPublicMethodsRemoval = @"using System;

namespace Hello1 {

	namespace Hello2 {

		class Program {
			private int foo() { }
			private double doo() { }
			protected char coo() { }
		}
	}
}";

        static string nonPublicMethodsRemovalResult = @"using System.Generics;
using NUnit.Framework;
using Moq;

namespace GeneratedTestClasses
{
    [TestFixture]
    class ProgramTest
    {
        private Program _program;
    }
}";

        static string ConstructorTest = @"using System;

namespace NewNamespace
{
	class Program
	{
		public Program(int a, double d, char c)
		{
			Console.WriteLine();
		}

		public Program(IAppDomainSetup setup, string str)
		{
			return;
		}

		public Program(IDisposable disp, IConvertible conv, ICloneable clon)
		{
			return;
		}

		private Program(IAsyncResult asn) { }
		protected Program(IFormatProvider prv) { }
	}

}";

        static string ConstructorTestResult = @"using System.Generics;
using NUnit.Framework;
using Moq;

namespace GeneratedTestClasses
{
    [TestFixture]
    class ProgramTest
    {
        [SetUp]
        void SetUp()
        {
            _setup = new Mock<IAppDomainSetup>();
            _str = """";
            _program = new Program(_setup.Object, _str);
        }

        private Program _program;
        private Mock<IAppDomainSetup> _setup;
        private string _str;
    }
}";

        #endregion
    }
}
